#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –±–æ—Ç–∞
"""

import os
import asyncio
from dotenv import load_dotenv
from db.database import Database
from subscription_checker import SubscriptionChecker

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

async def test_database():
    """–¢–µ—Å—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        db = Database()
        
        # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        test_user_id = 123456789
        result = db.create_user(test_user_id, "test_user", "Test", "User")
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {'–£—Å–ø–µ—à–Ω–æ' if result else '–û—à–∏–±–∫–∞'}")
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = db.get_user(test_user_id)
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {'–£—Å–ø–µ—à–Ω–æ' if user else '–û—à–∏–±–∫–∞'}")
        
        # –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è email
        result = db.update_user_email(test_user_id, "test@example.com")
        print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ email: {'–£—Å–ø–µ—à–Ω–æ' if result else '–û—à–∏–±–∫–∞'}")
        
        # –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
        result = db.update_subscription_check(test_user_id)
        print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {'–£—Å–ø–µ—à–Ω–æ' if result else '–û—à–∏–±–∫–∞'}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

async def test_subscription_checker():
    """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏...")
    
    bot_token = os.getenv("BOT_TOKEN")
    channel_username = os.getenv("CHANNEL_USERNAME", "@CloudSPBru")
    
    if not bot_token:
        print("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    try:
        checker = SubscriptionChecker(bot_token, channel_username)
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ
        test_user_id = 123456789
        subscription_info = await checker.check_subscription(test_user_id)
        
        print(f"‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
        print(f"   –°—Ç–∞—Ç—É—Å: {subscription_info['status']}")
        print(f"   –ü–æ–¥–ø–∏—Å–∞–Ω: {subscription_info['is_subscribed']}")
        print(f"   –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏: {subscription_info['meets_time_requirement']}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        return False

async def test_spam_protection():
    """–¢–µ—Å—Ç –∑–∞—â–∏—Ç—ã –æ—Ç —Å–ø–∞–º–∞"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—â–∏—Ç—ã –æ—Ç —Å–ø–∞–º–∞...")
    
    from datetime import datetime
    
    # –ò–º–∏—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –∑–∞—â–∏—Ç—ã –æ—Ç —Å–ø–∞–º–∞
    spam_protection = {}
    user_id = 123456789
    
    def is_spam(user_id: int) -> bool:
        current_time = datetime.now()
        
        if user_id not in spam_protection:
            spam_protection[user_id] = []
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø—Ä–æ—Å—ã (—Å—Ç–∞—Ä—à–µ 10 —Å–µ–∫—É–Ω–¥)
        spam_protection[user_id] = [
            req_time for req_time in spam_protection[user_id]
            if (current_time - req_time).seconds < 10
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∑–∞–ø—Ä–æ—Å
        spam_protection[user_id].append(current_time)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–µ–∫—É–Ω–¥
        if len(spam_protection[user_id]) > 3:
            return True
        
        return False
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º
    print("   –¢–µ—Å—Ç 1: –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å")
    result1 = is_spam(user_id)
    print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {'–°–ø–∞–º' if result1 else 'OK'}")
    
    print("   –¢–µ—Å—Ç 2: –í—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å")
    result2 = is_spam(user_id)
    print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {'–°–ø–∞–º' if result2 else 'OK'}")
    
    print("   –¢–µ—Å—Ç 3: –¢—Ä–µ—Ç–∏–π –∑–∞–ø—Ä–æ—Å")
    result3 = is_spam(user_id)
    print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {'–°–ø–∞–º' if result3 else 'OK'}")
    
    print("   –¢–µ—Å—Ç 4: –ß–µ—Ç–≤–µ—Ä—Ç—ã–π –∑–∞–ø—Ä–æ—Å (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ø–∞–º)")
    result4 = is_spam(user_id)
    print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {'–°–ø–∞–º' if result4 else 'OK'}")
    
    return result4  # –î–æ–ª–∂–µ–Ω –±—ã—Ç—å True (—Å–ø–∞–º)

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –±–æ—Ç–∞...\n")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    db_ok = await test_database()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–∫–∏
    subscription_ok = await test_subscription_checker()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞—â–∏—Ç—É –æ—Ç —Å–ø–∞–º–∞
    spam_ok = await test_spam_protection()
    
    print("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print(f"   –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {'‚úÖ OK' if db_ok else '‚ùå –û—à–∏–±–∫–∞'}")
    print(f"   –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏: {'‚úÖ OK' if subscription_ok else '‚ùå –û—à–∏–±–∫–∞'}")
    print(f"   –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞: {'‚úÖ OK' if spam_ok else '‚ùå –û—à–∏–±–∫–∞'}")
    
    if db_ok and subscription_ok and spam_ok:
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
    else:
        print("\n‚ö†Ô∏è –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")

if __name__ == "__main__":
    asyncio.run(main()) 
#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
"""

import asyncio
import os
from dotenv import load_dotenv
from db.database import Database
from utils.credentials import CredentialGenerator
from commands.admin import AdminCommands
from pterodactyl_api import PterodactylAPI

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

async def test_credentials_generator():
    """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    credentials = CredentialGenerator.generate_credentials(123456789, "TestUser")
    
    print(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:")
    print(f"Username: {credentials['username']}")
    print(f"Password: {credentials['password']}")
    print(f"Email: {credentials['email']}")
    print(f"Telegram ID: {credentials['telegram_id']}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è
    hashed = CredentialGenerator.hash_password(credentials['password'])
    print(f"‚úÖ –•–µ—à –ø–∞—Ä–æ–ª—è: {hashed[:20]}...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é
    is_valid = CredentialGenerator.verify_password(credentials['password'], hashed)
    print(f"‚úÖ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–∞—Ä–æ–ª—è: {is_valid}")
    
    print()

async def test_database_functions():
    """–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    db = Database()
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = 999999999
    db.create_user(user_id, "testuser", "Test", "User")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    all_users = db.get_all_users()
    banned_users = db.get_banned_users()
    all_servers = db.get_all_servers()
    
    print(f"‚úÖ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(all_users)}")
    print(f"‚úÖ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(banned_users)}")
    print(f"‚úÖ –í—Å–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–æ–≤: {len(all_servers)}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞ —Å —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    credentials = CredentialGenerator.generate_credentials(user_id, "TestUser")
    success = db.create_server_with_credentials(user_id, "test_server_123", "Test Server", credentials)
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞ —Å —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏: {success}")
    
    # –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–∏
    logs = db.get_recent_action_logs(5)
    print(f"‚úÖ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏: {len(logs)} –∑–∞–ø–∏—Å–µ–π")
    
    print()

async def test_admin_commands():
    """–¢–µ—Å—Ç –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥...")
    
    db = Database()
    pterodactyl_api = None  # –ù–µ —Ç–µ—Å—Ç–∏—Ä—É–µ–º API –≤ —ç—Ç–æ–º —Å–∫—Ä–∏–ø—Ç–µ
    
    admin_commands = AdminCommands(db, pterodactyl_api)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = admin_commands.get_statistics()
    print(f"‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞: {bool(stats)}")
    if stats:
        print(f"  - –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats.get('total_users', 0)}")
        print(f"  - –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats.get('active_users', 0)}")
        print(f"  - –í—Å–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–æ–≤: {stats.get('total_servers', 0)}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏
    logs = admin_commands.get_recent_logs(5)
    print(f"‚úÖ –õ–æ–≥–∏ –ø–æ–ª—É—á–µ–Ω—ã: {len(logs)} –∑–∞–ø–∏—Å–µ–π")
    
    print()

async def test_pterodactyl_api():
    """–¢–µ—Å—Ç Pterodactyl API"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Pterodactyl API...")
    
    api_url = os.getenv("PTERODACTYL_URL", "https://panel.cloudspb.ru")
    api_token = os.getenv("PTERODACTYL_TOKEN")
    
    if not api_token:
        print("‚ùå PTERODACTYL_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç API")
        return
    
    try:
        api = PterodactylAPI(api_url, api_token)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        test_email = "test@example.com"
        user_exists = await api.check_user_exists(test_email)
        print(f"‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {test_email}: {user_exists}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è API
        credentials = CredentialGenerator.generate_credentials(123456789, "TestUser")
        print(f"‚úÖ –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è API:")
        print(f"  - Username: {credentials['username']}")
        print(f"  - Email: {credentials['email']}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API: {e}")
    
    print()

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π...\n")
    
    await test_credentials_generator()
    await test_database_functions()
    await test_admin_commands()
    await test_pterodactyl_api()
    
    print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    asyncio.run(main()) 
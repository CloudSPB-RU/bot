import os
import logging
import asyncio
from datetime import datetime
from functools import wraps
from typing import Callable, Any, Coroutine, Dict
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler, 
    MessageHandler, filters, ContextTypes
)
from dotenv import load_dotenv

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ –º–æ–¥—É–ª–∏
from db.database import Database
from subscription_checker import SubscriptionChecker
from pterodactyl_api import PterodactylAPI
from commands.start import StartCommand
from commands.check import CheckCommand
from commands.admin import AdminCommands
from email_handler import EmailHandler

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

def async_handler(func: Callable[[Update, ContextTypes.DEFAULT_TYPE], Coroutine[Any, Any, None]]) -> Callable[[Update, ContextTypes.DEFAULT_TYPE], Coroutine[Any, Any, None]]:
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π"""
    @wraps(func)
    async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        return await func(update, context)
    return wrapper

class TelegramBot:
    def __init__(self):
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        self.bot_token = os.getenv("BOT_TOKEN")
        self.pterodactyl_token = os.getenv("PTERODACTYL_TOKEN")
        self.pterodactyl_url = os.getenv("PTERODACTYL_URL", "https://panel.cloudspb.ru")
        self.channel_username = os.getenv("CHANNEL_USERNAME", "@CloudSPBru")
        
        if not self.bot_token:
            raise ValueError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self.db = Database()
        self.subscription_checker = SubscriptionChecker(self.bot_token, self.channel_username)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Pterodactyl API —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –µ—Å—Ç—å
        if self.pterodactyl_token:
            self.pterodactyl_api = PterodactylAPI(self.pterodactyl_url, self.pterodactyl_token)
        else:
            self.pterodactyl_api = None
            logger.warning("PTERODACTYL_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω, —Ñ—É–Ω–∫—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
        self.start_command = StartCommand(self.db, self.subscription_checker)
        self.check_command = CheckCommand(self.db, self.subscription_checker)
        self.admin_commands = AdminCommands(self.db, self.pterodactyl_api) if self.pterodactyl_api else None
        self.email_handler = EmailHandler(self.db)
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        self.application = Application.builder().token(self.bot_token).build()
        
        # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç —Å–ø–∞–º–∞
        self.spam_protection = {}
    
    def is_spam(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ø–∞–º - –º–∞–∫—Å–∏–º—É–º 5 –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ 5 —Å–µ–∫—É–Ω–¥"""
        current_time = datetime.now()
        
        if user_id not in self.spam_protection:
            self.spam_protection[user_id] = []
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø—Ä–æ—Å—ã (—Å—Ç–∞—Ä—à–µ 5 —Å–µ–∫—É–Ω–¥)
        self.spam_protection[user_id] = [
            req_time for req_time in self.spam_protection[user_id]
            if (current_time - req_time).seconds < 5
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∑–∞–ø—Ä–æ—Å
        self.spam_protection[user_id].append(current_time)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–µ–∫—É–Ω–¥
        if len(self.spam_protection[user_id]) > 5:
            return True
        
        return False
    
    async def handle_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        if not update.effective_user or not update.message:
            return
            
        if self.is_spam(update.effective_user.id):
            await update.message.reply_text("‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ.")
            return
        
        await self.start_command.handle(update, context)
    
    async def handle_check(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /check"""
        if not update.effective_user or not update.message:
            return
            
        if self.is_spam(update.effective_user.id):
            await update.message.reply_text("‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ.")
            return
        
        await self.check_command.handle(update, context)
    
    async def handle_ban(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /ban"""
        if self.admin_commands:
            await self.admin_commands.handle_ban(update, context)
    
    async def handle_unban(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /unban"""
        if self.admin_commands:
            await self.admin_commands.handle_unban(update, context)
    
    async def handle_give_server(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /giveserver"""
        if self.admin_commands:
            await self.admin_commands.handle_give_server(update, context)
    
    async def handle_delete_server(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /deleteserver"""
        if self.admin_commands:
            await self.admin_commands.handle_delete_server(update, context)
    
    async def handle_admin_panel(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin"""
        if self.admin_commands:
            await self.admin_commands.handle_admin_panel(update, context)
    
    async def handle_server_info(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /serverinfo"""
        if self.admin_commands:
            await self.admin_commands.handle_server_info(update, context)
    
    async def handle_list_servers(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /listservers"""
        if self.admin_commands:
            await self.admin_commands.handle_list_servers(update, context)
    
    async def handle_callback_query(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤"""
        query = update.callback_query
        if not query or not query.from_user:
            return
            
        await query.answer()
        
        if self.is_spam(query.from_user.id):
            await query.edit_message_text("‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ.")
            return
        
        if not query.data:
            return
            
        if query.data == "set_email":
            await self.handle_set_email(query)
        elif query.data == "get_server":
            await self.handle_get_server(query)
        elif query.data == "my_servers":
            await self.handle_my_servers(query)
        elif query.data == "help":
            await self.handle_help(query)
        elif query.data == "check_subscription":
            await self.handle_check_subscription(query)
        elif query.data == "back_to_start":
            await self.handle_back_to_start(query)
        elif query.data.startswith("admin_"):
            await self.handle_admin_callback(query)
    
    async def handle_set_email(self, query) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ email"""
        keyboard = [
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "üìß <b>–£–∫–∞–∂–∏—Ç–µ –≤–∞—à email:</b>\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à email –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.\n"
            "–û–Ω –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–æ–º.\n\n"
            "–ü—Ä–∏–º–µ—Ä: user@example.com",
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
    
    async def handle_get_server(self, query) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞"""
        user_id = query.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        user_data = self.db.get_user(user_id)
        if user_data and user_data.get('is_banned'):
            ban_reason = user_data.get('ban_reason', '–ü—Ä–∏—á–∏–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞')
            keyboard = [
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(
                f"üö´ <b>–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã!</b>\n\n"
                f"–ü—Ä–∏—á–∏–Ω–∞: {ban_reason}\n\n"
                "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.",
                reply_markup=reply_markup,
                parse_mode='HTML'
            )
            return
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        subscription_info = await self.subscription_checker.check_subscription(user_id)
        if not subscription_info['is_subscribed'] or not subscription_info['meets_time_requirement']:
            subscription_message = await self.subscription_checker.get_subscription_message(user_id)
            keyboard = [
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(
                subscription_message,
                reply_markup=reply_markup,
                parse_mode='HTML'
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å–µ—Ä–≤–µ—Ä —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_servers = self.db.get_user_servers(user_id)
        if user_servers:
            keyboard = [
                [InlineKeyboardButton("üìä –ú–æ–π —Å–µ—Ä–≤–µ—Ä", callback_data="my_servers")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(
                "‚ùå <b>–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä!</b>\n\n"
                f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Ä–≤–µ—Ä–æ–≤: {len(user_servers)}\n"
                "–û–¥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –∏–º–µ—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Å–µ—Ä–≤–µ—Ä.",
                reply_markup=reply_markup,
                parse_mode='HTML'
            )
            return
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–∫–∞–∑–∞–Ω –ª–∏ email
        if not user_data or not user_data.get('email'):
            keyboard = [
                [InlineKeyboardButton("üìß –£–∫–∞–∑–∞—Ç—å email", callback_data="set_email")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(
                "üìß <b>–°–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ email!</b>\n\n"
                "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å email.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É 'üìß –£–∫–∞–∑–∞—Ç—å email'",
                reply_markup=reply_markup,
                parse_mode='HTML'
            )
            return
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º email –Ω–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –≤ Pterodactyl
        if self.pterodactyl_api:
            try:
                exists = await self.pterodactyl_api.check_user_exists(email=user_data.get('email'))
                if exists:
                    keyboard = [
                        [InlineKeyboardButton("üìß –£–∫–∞–∑–∞—Ç—å –¥—Ä—É–≥–æ–π email", callback_data="set_email")],
                        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")]
                    ]
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    await query.edit_message_text(
                        "‚ùå <b>–û—à–∏–±–∫–∞: Email —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –ø–∞–Ω–µ–ª–∏!</b>\n\n"
                        "–ö–æ–¥ –æ—à–∏–±–∫–∏: EMAIL_EXISTS\n"
                        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –¥—Ä—É–≥–æ–π email.",
                        reply_markup=reply_markup,
                        parse_mode='HTML'
                    )
                    return
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ email –≤ Pterodactyl: {e}")
                keyboard = [
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                await query.edit_message_text(
                    "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ email!</b>\n\n"
                    "–ö–æ–¥ –æ—à–∏–±–∫–∏: PT_EMAIL_CHECK\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    reply_markup=reply_markup,
                    parse_mode='HTML'
                )
                return
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –ø–æ–ø—ã—Ç–∫–∞–º–∏
        from utils.credentials import CredentialGenerator
        max_attempts = 3
        server_result = None
        credentials = None
        error_code = None
        error_message = None
        if not self.pterodactyl_api:
            keyboard = [
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(
                "‚ùå <b>–°–µ—Ä–≤–∏—Å —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!</b>\n\n–ö–æ–¥ –æ—à–∏–±–∫–∏: PT_API_UNAVAILABLE\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                reply_markup=reply_markup,
                parse_mode='HTML'
            )
            return
        for attempt in range(max_attempts):
            credentials = CredentialGenerator.generate_credentials(user_id, user_data.get('first_name'))
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å username/email –≤ Pterodactyl
            try:
                exists = await self.pterodactyl_api.check_user_exists(
                    email=credentials['email'],
                    username=credentials['username']
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ username/email –≤ Pterodactyl: {e}")
                exists = True
            if exists:
                if attempt == max_attempts - 1:
                    error_code = "PT_USER_EXISTS"
                    error_message = "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–∞–Ω–µ–ª–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                continue
            # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å —Å–µ—Ä–≤–µ—Ä
            await query.edit_message_text(
                f"‚è≥ <b>–°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–µ—Ä... (–ø–æ–ø—ã—Ç–∫–∞ {attempt+1})</b>\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.",
                parse_mode='HTML'
            )
            try:
                server_result = await self.pterodactyl_api.create_server_with_credentials(credentials)
                if server_result:
                    break
                else:
                    error_code = "PT_SERVER_CREATE"
                    error_message = "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞."
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞: {e}")
                error_code = "PT_SERVER_CREATE_EXCEPTION"
                error_message = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞: {e}"
        if not server_result or not credentials:
            keyboard = [
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(
                f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞!</b>\n\n–ö–æ–¥ –æ—à–∏–±–∫–∏: {error_code or 'UNKNOWN'}\n{error_message or ''}\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                reply_markup=reply_markup,
                parse_mode='HTML'
            )
            return
        server_id = server_result.get('attributes', {}).get('identifier') if server_result else None
        server_name = server_result.get('attributes', {}).get('name') if server_result else None
        if not server_id or not server_name:
            keyboard = [
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(
                "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–∞!</b>\n\n–ö–æ–¥ –æ—à–∏–±–∫–∏: PT_SERVER_ATTRS\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                reply_markup=reply_markup,
                parse_mode='HTML'
            )
            return
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        if self.db.create_server_with_credentials(user_id, server_id, server_name, credentials):
            keyboard = [
                [InlineKeyboardButton("üìä –ú–æ–π —Å–µ—Ä–≤–µ—Ä", callback_data="my_servers")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(
                f"‚úÖ <b>–°–µ—Ä–≤–µ—Ä —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!</b>\n\n"
                f"Server ID: {server_id}\n"
                f"Username: {credentials['username']}\n"
                f"Password: {credentials['password']}\n"
                f"Email: {credentials['email']}\n\n"
                "–î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.",
                reply_markup=reply_markup,
                parse_mode='HTML'
            )
        else:
            keyboard = [
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(
                "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞!</b>\n\n–ö–æ–¥ –æ—à–∏–±–∫–∏: DB_SERVER_SAVE\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                reply_markup=reply_markup,
                parse_mode='HTML'
            )
    
    async def handle_my_servers(self, query) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤"""
        user_id = query.from_user.id
        user_servers = self.db.get_user_servers(user_id)
        
        if not user_servers:
            keyboard = [
                [InlineKeyboardButton("üñ•Ô∏è –ü–æ–ª—É—á–∏—Ç—å —Å–µ—Ä–≤–µ—Ä", callback_data="get_server")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                "üìä <b>–£ –≤–∞—Å –Ω–µ—Ç —Å–µ—Ä–≤–µ—Ä–æ–≤</b>\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É 'üñ•Ô∏è –ü–æ–ª—É—á–∏—Ç—å —Å–µ—Ä–≤–µ—Ä' –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞.",
                reply_markup=reply_markup,
                parse_mode='HTML'
            )
            return
        
        server_text = "üìä <b>–í–∞—à–∏ —Å–µ—Ä–≤–µ—Ä—ã:</b>\n\n"
        for i, server in enumerate(user_servers, 1):
            server_text += (
                f"<b>–°–µ—Ä–≤–µ—Ä {i}:</b>\n"
                f"ID: {server['pterodactyl_id']}\n"
                f"–ù–∞–∑–≤–∞–Ω–∏–µ: {server['server_name']}\n"
                f"Username: {server.get('username', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                f"Email: {server.get('email', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                f"–°—Ç–∞—Ç—É—Å: {server['status']}\n"
                f"–°–æ–∑–¥–∞–Ω: {server['created_at']}\n\n"
            )
        
        keyboard = [
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(server_text, reply_markup=reply_markup, parse_mode='HTML')
    
    async def handle_help(self, query) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–º–æ—â–∏"""
        help_text = (
            "‚ÑπÔ∏è <b>–ü–æ–º–æ—â—å</b>\n\n"
            "<b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
            "/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
            "/check - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É\n"
            "/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
            "<b>–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å —Å–µ—Ä–≤–µ—Ä:</b>\n"
            "1. –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª\n"
            "2. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –º–∏–Ω–∏–º—É–º 10 –º–∏–Ω—É—Ç\n"
            "3. –£–∫–∞–∂–∏—Ç–µ –≤–∞—à email\n"
            "4. –ü–æ–ª—É—á–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä\n\n"
            "<b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞:</b>\n"
            "–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )
        
        keyboard = [
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(help_text, reply_markup=reply_markup, parse_mode='HTML')
    
    async def handle_check_subscription(self, query) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏"""
        user_id = query.from_user.id
        subscription_message = await self.subscription_checker.get_subscription_message(user_id)
        
        keyboard = [
            [InlineKeyboardButton("üñ•Ô∏è –ü–æ–ª—É—á–∏—Ç—å —Å–µ—Ä–≤–µ—Ä", callback_data="get_server")],
            [InlineKeyboardButton("üìß –£–∫–∞–∑–∞—Ç—å email", callback_data="set_email")],
            [InlineKeyboardButton("üìä –ú–æ–∏ —Å–µ—Ä–≤–µ—Ä—ã", callback_data="my_servers")],
            [InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞", callback_data="check_subscription")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            subscription_message,
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
    
    async def handle_back_to_start(self, query) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥' - –≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        user = query.from_user
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        self.db.create_user(
            telegram_id=user.id,
            username=user.username,
            first_name=user.first_name,
            last_name=user.last_name
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        subscription_message = await self.subscription_checker.get_subscription_message(user.id)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = [
            [InlineKeyboardButton("üìß –£–∫–∞–∑–∞—Ç—å email", callback_data="set_email")],
            [InlineKeyboardButton("üñ•Ô∏è –ü–æ–ª—É—á–∏—Ç—å —Å–µ—Ä–≤–µ—Ä", callback_data="get_server")],
            [InlineKeyboardButton("üìä –ú–æ–π —Å–µ—Ä–≤–µ—Ä", callback_data="my_servers")],
            [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        welcome_text = (
            f"üëã <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n"
            f"{subscription_message}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        
        await query.edit_message_text(
            welcome_text,
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
    
    async def handle_admin_callback(self, query) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–¥–º–∏–Ω—Å–∫–∏—Ö callback"""
        if not self.admin_commands or not self.admin_commands.is_admin(query.from_user.id):
            await query.edit_message_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
        
        if query.data == "admin_stats":
            keyboard = [
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_panel")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            if not self.admin_commands:
                await query.edit_message_text("‚ùå –ê–¥–º–∏–Ω—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
                return
            
            stats = self.admin_commands.get_statistics()
            if stats:
                stats_text = (
                    "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>\n\n"
                    f"üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n"
                    f"‚Ä¢ –í—Å–µ–≥–æ: {stats.get('total_users', 0)}\n"
                    f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {stats.get('active_users', 0)}\n"
                    f"‚Ä¢ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {stats.get('banned_users', 0)}\n"
                    f"‚Ä¢ –ù–æ–≤—ã—Ö –∑–∞ 24—á: {stats.get('new_users_today', 0)}\n\n"
                    f"üñ•Ô∏è <b>–°–µ—Ä–≤–µ—Ä—ã:</b>\n"
                    f"‚Ä¢ –í—Å–µ–≥–æ: {stats.get('total_servers', 0)}\n"
                    f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {stats.get('active_servers', 0)}\n"
                    f"‚Ä¢ –ù–æ–≤—ã—Ö –∑–∞ 24—á: {stats.get('new_servers_today', 0)}"
                )
            else:
                stats_text = "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"
            
            await query.edit_message_text(
                stats_text,
                reply_markup=reply_markup,
                parse_mode='HTML'
            )
        elif query.data == "admin_users":
            keyboard = [
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_panel")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                "üë• <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏</b>\n\n"
                "–ö–æ–º–∞–Ω–¥—ã:\n"
                "/ban &lt;user_id&gt; [–ø—Ä–∏—á–∏–Ω–∞] - –ó–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
                "/unban &lt;user_id&gt; - –†–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                reply_markup=reply_markup,
                parse_mode='HTML'
            )
        elif query.data == "admin_servers":
            keyboard = [
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_panel")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                "üñ•Ô∏è <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞–º–∏</b>\n\n"
                "–ö–æ–º–∞–Ω–¥—ã:\n"
                "/giveserver &lt;user_id&gt; - –í—ã–¥–∞—Ç—å —Å–µ—Ä–≤–µ—Ä\n"
                "/deleteserver &lt;user_id&gt; - –£–¥–∞–ª–∏—Ç—å —Å–µ—Ä–≤–µ—Ä",
                reply_markup=reply_markup,
                parse_mode='HTML'
            )
        elif query.data == "admin_logs":
            if not self.admin_commands:
                await query.edit_message_text("‚ùå –ê–¥–º–∏–Ω—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
                return
            
            logs = self.admin_commands.get_recent_logs(10)
            if logs:
                logs_text = "üìù <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:</b>\n\n"
                for log in logs:
                    admin_name = log.get('admin_first_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                    action = log.get('action_type', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                    details = log.get('details', '')
                    created_at = log.get('created_at', '')
                    
                    logs_text += (
                        f"üë§ <b>{admin_name}</b>\n"
                        f"–î–µ–π—Å—Ç–≤–∏–µ: {action}\n"
                        f"–î–µ—Ç–∞–ª–∏: {details}\n"
                        f"–í—Ä–µ–º—è: {created_at}\n\n"
                    )
            else:
                logs_text = "üìù <b>–õ–æ–≥–∏ –¥–µ–π—Å—Ç–≤–∏–π</b>\n\n–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π"
            
            keyboard = [
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_panel")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                logs_text,
                reply_markup=reply_markup,
                parse_mode='HTML'
            )
        elif query.data == "admin_panel":
            keyboard = [
                [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
                [InlineKeyboardButton("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", callback_data="admin_users")],
                [InlineKeyboardButton("üñ•Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞–º–∏", callback_data="admin_servers")],
                [InlineKeyboardButton("üìù –õ–æ–≥–∏ –¥–µ–π—Å—Ç–≤–∏–π", callback_data="admin_logs")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                "üîß <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=reply_markup,
                parse_mode='HTML'
            )
    
    async def handle_text_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è email)"""
        if not update.message or not update.message.text:
            return
        
        user = update.effective_user
        if not user:
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        user_data = self.db.get_user(user.id)
        if user_data and user_data.get('is_banned'):
            ban_reason = user_data.get('ban_reason', '–ü—Ä–∏—á–∏–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞')
            await update.message.reply_text(
                f"üö´ <b>–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã!</b>\n\n"
                f"–ü—Ä–∏—á–∏–Ω–∞: {ban_reason}\n\n"
                "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.",
                parse_mode='HTML'
            )
            return
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º email
        await self.email_handler.handle_email_message(update, context)
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        # –ö–æ–º–∞–Ω–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.application.add_handler(CommandHandler("start", self.handle_start, block=False))
        self.application.add_handler(CommandHandler("check", self.handle_check, block=False))
        self.application.add_handler(CommandHandler("help", self.handle_help, block=False))
        
        # –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
        self.application.add_handler(CommandHandler("ban", self.handle_ban, block=False))
        self.application.add_handler(CommandHandler("unban", self.handle_unban, block=False))
        self.application.add_handler(CommandHandler("giveserver", self.handle_give_server))
        self.application.add_handler(CommandHandler("deleteserver", self.handle_delete_server))
        self.application.add_handler(CommandHandler("admin", self.handle_admin_panel))
        self.application.add_handler(CommandHandler("serverinfo", self.handle_server_info))
        self.application.add_handler(CommandHandler("listservers", self.handle_list_servers))
        
        # Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self.application.add_handler(CallbackQueryHandler(self.handle_callback_query))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è email
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_text_message))
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        self.setup_handlers()
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
        self.application.run_polling()

if __name__ == "__main__":
    bot = TelegramBot()
    bot.run()
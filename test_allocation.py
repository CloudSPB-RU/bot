#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ allocation –≤ Pterodactyl
"""

import asyncio
import os
from dotenv import load_dotenv
from pterodactyl_api import PterodactylAPI

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

async def test_allocation():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è allocation"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è allocation...")
    
    api_url = os.getenv("PTERODACTYL_URL", "https://panel.cloudspb.ru")
    api_token = os.getenv("PTERODACTYL_TOKEN")
    
    if not api_token:
        print("‚ùå PTERODACTYL_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    try:
        api = PterodactylAPI(api_url, api_token)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ allocation
        allocation_id = await api.get_available_allocation()
        
        if allocation_id:
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω –¥–æ—Å—Ç—É–ø–Ω—ã–π allocation: {allocation_id}")
        else:
            print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –¥–æ—Å—Ç—É–ø–Ω—ã–µ allocation")
            
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞ —Å —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        from utils.credentials import CredentialGenerator
        credentials = CredentialGenerator.generate_credentials(123456789, "TestUser")
        
        print(f"‚úÖ –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∞:")
        print(f"  - Username: {credentials['username']}")
        print(f"  - Email: {credentials['email']}")
        
        # –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å —Å–µ—Ä–≤–µ—Ä
        server_result = await api.create_server_with_credentials(credentials)
        
        if server_result:
            server_id = server_result.get('attributes', {}).get('identifier')
            server_name = server_result.get('attributes', {}).get('name')
            print(f"‚úÖ –°–µ—Ä–≤–µ—Ä —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
            print(f"  - Server ID: {server_id}")
            print(f"  - Server Name: {server_name}")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ allocation...\n")
    
    await test_allocation()
    
    print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    asyncio.run(main()) 
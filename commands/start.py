import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from db.database import Database
from subscription_checker import SubscriptionChecker
import os

logger = logging.getLogger(__name__)

class StartCommand:
    def __init__(self, db: Database, subscription_checker: SubscriptionChecker):
        self.db = db
        self.subscription_checker = subscription_checker
    
    async def handle(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        
        if not user:
            return
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        self.db.create_user(
            telegram_id=user.id,
            username=user.username,
            first_name=user.first_name,
            last_name=user.last_name
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        subscription_message = await self.subscription_checker.get_subscription_message(user.id)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = [
            [InlineKeyboardButton("üìß –£–∫–∞–∑–∞—Ç—å email", callback_data="set_email")],
            [InlineKeyboardButton("üñ•Ô∏è –ü–æ–ª—É—á–∏—Ç—å —Å–µ—Ä–≤–µ—Ä", callback_data="get_server")],
            [InlineKeyboardButton("üìä –ú–æ–π —Å–µ—Ä–≤–µ—Ä", callback_data="my_servers")],
            [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        welcome_text = (
            f"üëã <b>–ü—Ä–∏–≤–µ—Ç, {user.first_name}!</b>\n\n"
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–≥—Ä–æ–≤—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤.\n\n"
            f"{subscription_message}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        
        if update.message:
            await update.message.reply_text(
                welcome_text,
                reply_markup=reply_markup,
                parse_mode='HTML'
            )

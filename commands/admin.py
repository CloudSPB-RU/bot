import logging
import os
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from db.database import Database
from pterodactyl_api import PterodactylAPI
from utils.credentials import CredentialGenerator

logger = logging.getLogger(__name__)

class AdminCommands:
    def __init__(self, db: Database, pterodactyl_api: PterodactylAPI):
        self.db = db
        self.pterodactyl_api = pterodactyl_api
        self.admin_ids = [int(id.strip()) for id in os.getenv("ADMIN_IDS", "").split(",") if id.strip()]
    
    def is_admin(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
        return user_id in self.admin_ids
    
    async def get_server_info(self, server_id: str) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–µ—Ä–µ"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ Pterodactyl
            server_info = await self.pterodactyl_api.get_server_info(server_id)
            if not server_info:
                return "‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–∞–Ω–µ–ª–∏ Pterodactyl"
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            db_server = self.db.get_server(server_id)
            if not db_server:
                return "‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–ª–∞–¥–µ–ª—å—Ü–µ
            user_data = self.db.get_user(db_server['user_id'])
            owner_info = "üë§ <b>–í–ª–∞–¥–µ–ª–µ—Ü</b>\n–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–ª–∞–¥–µ–ª—å—Ü–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
            
            if user_data:
                owner_info = (
                    "üë§ <b>–í–ª–∞–¥–µ–ª–µ—Ü</b>\n"
                    f"ID: {user_data.get('telegram_id', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                    f"Username: @{user_data.get('username', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                    f"–ò–º—è: {user_data.get('first_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}"
                )
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–µ—Ä–≤–µ—Ä–∞
            server_limits = server_info.get('attributes', {}).get('limits', {})
            server_params = (
                "‚öôÔ∏è <b>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–µ—Ä–≤–µ—Ä–∞</b>\n"
                f"CPU: {server_limits.get('cpu', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}%\n"
                f"RAM: {server_limits.get('memory', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')} MB\n"
                f"–î–∏—Å–∫: {server_limits.get('disk', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')} MB"
            )
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            info = (
                f"üñ•Ô∏è <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ</b>\n\n"
                f"ID: {server_id}\n"
                f"–ù–∞–∑–≤–∞–Ω–∏–µ: {db_server.get('server_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
                f"–°—Ç–∞—Ç—É—Å: {db_server.get('status', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                f"–°–æ–∑–¥–∞–Ω: {db_server.get('created_at', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n\n"
                f"{owner_info}\n\n"
                f"{server_params}"
            )
            return info
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–≤–µ—Ä–µ: {e}")
            return "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–≤–µ—Ä–µ"
    
    async def handle_server_info(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /serverinfo"""
        if not update or not update.effective_user or not update.message:
            return
            
        if not self.is_admin(update.effective_user.id):
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", parse_mode='HTML')
            return
        
        if not context.args or len(context.args) < 1:
            await update.message.reply_text(
                "‚ùå <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b> /serverinfo &lt;server_id&gt;\n\n"
                "–ü—Ä–∏–º–µ—Ä:\n"
                "/serverinfo abc123",
                parse_mode='HTML'
            )
            return
        
        server_id = context.args[0]
        info = await self.get_server_info(server_id)
        await update.message.reply_text(info, parse_mode='HTML')
    
    async def handle_list_servers(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /listservers"""
        if not update or not update.effective_user or not update.message:
            return
            
        if not self.is_admin(update.effective_user.id):
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", parse_mode='HTML')
            return
        
        servers = self.db.get_all_servers()
        if not servers:
            await update.message.reply_text("üìä –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤")
            return
        
        response = "üìä <b>–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤:</b>\n\n"
        for server in servers:
            user_data = self.db.get_user(server['user_id'])
            owner_info = "–í–ª–∞–¥–µ–ª–µ—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω"
            if user_data:
                username = user_data.get('username', '–ù–µ—Ç username')
                first_name = user_data.get('first_name', '–ë–µ–∑ –∏–º–µ–Ω–∏')
                owner_info = f"–í–ª–∞–¥–µ–ª–µ—Ü: {first_name} (@{username})"
            
            response += (
                f"üñ•Ô∏è <b>–°–µ—Ä–≤–µ—Ä:</b> {server['server_name']}\n"
                f"ID: {server['pterodactyl_id']}\n"
                f"{owner_info}\n"
                f"–°—Ç–∞—Ç—É—Å: {server['status']}\n"
                f"–°–æ–∑–¥–∞–Ω: {server['created_at']}\n\n"
            )
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
        if len(response) > 4000:
            parts = [response[i:i+4000] for i in range(0, len(response), 4000)]
            for part in parts:
                await update.message.reply_text(part, parse_mode='HTML')
        else:
            await update.message.reply_text(response, parse_mode='HTML')
    
    def get_statistics(self) -> dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞"""
        try:
            # –ü–æ–¥—Å—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            total_users = len(self.db.get_all_users())
            banned_users = len(self.db.get_banned_users())
            active_users = total_users - banned_users
            
            # –ü–æ–¥—Å—á–µ—Ç —Å–µ—Ä–≤–µ—Ä–æ–≤
            total_servers = len(self.db.get_all_servers())
            active_servers = len(self.db.get_active_servers())
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
            today = datetime.now()
            yesterday = today - timedelta(days=1)
            new_users_today = len(self.db.get_users_created_after(yesterday))
            new_servers_today = len(self.db.get_servers_created_after(yesterday))
            
            return {
                'total_users': total_users,
                'banned_users': banned_users,
                'active_users': active_users,
                'total_servers': total_servers,
                'active_servers': active_servers,
                'new_users_today': new_users_today,
                'new_servers_today': new_servers_today
            }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {}
    
    def get_recent_logs(self, limit: int = 10) -> list:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏ –¥–µ–π—Å—Ç–≤–∏–π"""
        try:
            return self.db.get_recent_action_logs(limit)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤: {e}")
            return []
    
    async def handle_ban(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ó–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if not update or not update.effective_user or not update.message:
            return
            
        if not self.is_admin(update.effective_user.id):
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", parse_mode='HTML')
            return
        
        if not context.args or len(context.args) < 1:
            await update.message.reply_text(
                "‚ùå <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b> /ban &lt;user_id –∏–ª–∏ username&gt; [–ø—Ä–∏—á–∏–Ω–∞]\n\n"
                "–ü—Ä–∏–º–µ—Ä—ã:\n"
                "/ban 123456789\n"
                "/ban @username\n"
                "/ban 123456789 –°–ø–∞–º",
                parse_mode='HTML'
            )
            return
        
        target = context.args[0]
        reason = " ".join(context.args[1:]) if len(context.args) > 1 else None
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data = None
        if target.startswith('@'):
            username = target[1:]
            user_data = self.db.get_user_by_username(username)
        else:
            try:
                user_id = int(target)
                user_data = self.db.get_user(user_id)
            except ValueError:
                await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                return
        
        if not user_data:
            await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –ë–∞–Ω–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if self.db.ban_user(user_data['telegram_id'], reason):
            self.db.log_admin_action(
                update.effective_user.id,
                "ban_user",
                user_data['telegram_id'],
                f"–ü—Ä–∏—á–∏–Ω–∞: {reason}"
            )
            await update.message.reply_text(
                f"‚úÖ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!</b>\n\n"
                f"ID: {user_data['telegram_id']}\n"
                f"Username: @{user_data['username']}\n"
                f"–ò–º—è: {user_data['first_name']}\n"
                f"–ü—Ä–∏—á–∏–Ω–∞: {reason or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}",
                parse_mode='HTML'
            )
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    
    async def handle_unban(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–†–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if not update or not update.effective_user or not update.message:
            return
            
        if not self.is_admin(update.effective_user.id):
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", parse_mode='HTML')
            return
        
        if not context.args or len(context.args) < 1:
            await update.message.reply_text(
                "‚ùå <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b> /unban &lt;user_id –∏–ª–∏ username&gt;\n\n"
                "–ü—Ä–∏–º–µ—Ä—ã:\n"
                "/unban 123456789\n"
                "/unban @username",
                parse_mode='HTML'
            )
            return
        
        target = context.args[0]
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data = None
        if target.startswith('@'):
            username = target[1:]
            user_data = self.db.get_user_by_username(username)
        else:
            try:
                user_id = int(target)
                user_data = self.db.get_user(user_id)
            except ValueError:
                await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                return
        
        if not user_data:
            await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –†–∞–∑–±–∞–Ω–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if self.db.unban_user(user_data['telegram_id']):
            self.db.log_admin_action(
                update.effective_user.id,
                "unban_user",
                user_data['telegram_id']
            )
            await update.message.reply_text(
                f"‚úÖ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!</b>\n\n"
                f"ID: {user_data['telegram_id']}\n"
                f"Username: @{user_data['username']}\n"
                f"–ò–º—è: {user_data['first_name']}",
                parse_mode='HTML'
            )
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    
    async def handle_give_server(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–í—ã–¥–∞—Ç—å —Å–µ—Ä–≤–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        if not update or not update.effective_user or not update.message:
            return
            
        if not self.is_admin(update.effective_user.id):
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", parse_mode='HTML')
            return
        
        if not context.args or len(context.args) < 1:
            await update.message.reply_text(
                "‚ùå <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b> /giveserver &lt;user_id –∏–ª–∏ username&gt;\n\n"
                "–ü—Ä–∏–º–µ—Ä—ã:\n"
                "/giveserver 123456789\n"
                "/giveserver @username",
                parse_mode='HTML'
            )
            return
        
        target = context.args[0]
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data = None
        if target.startswith('@'):
            username = target[1:]
            user_data = self.db.get_user_by_username(username)
        else:
            try:
                user_id = int(target)
                user_data = self.db.get_user(user_id)
            except ValueError:
                await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                return
        
        if not user_data:
            await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å–µ—Ä–≤–µ—Ä —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_servers = self.db.get_user_servers(user_data['telegram_id'])
        if user_servers:
            await update.message.reply_text(
                f"‚ùå <b>–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä!</b>\n\n"
                f"ID: {user_data['telegram_id']}\n"
                f"Username: @{user_data['username']}\n"
                f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Ä–≤–µ—Ä–æ–≤: {len(user_servers)}",
                parse_mode='HTML'
            )
            return
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        credentials = CredentialGenerator.generate_credentials(
            user_data['telegram_id'], 
            user_data['first_name']
        )
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–µ—Ä
        server_result = await self.pterodactyl_api.create_server_with_credentials(credentials)
        if server_result:
            server_id = server_result.get('attributes', {}).get('identifier')
            server_name = server_result.get('attributes', {}).get('name')
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            if self.db.create_server_with_credentials(user_data['telegram_id'], server_id, server_name, credentials):
                self.db.log_admin_action(
                    update.effective_user.id,
                    "give_server",
                    user_data['telegram_id'],
                    f"Server ID: {server_id}, Username: {credentials['username']}"
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                try:
                    await update.get_bot().send_message(
                        chat_id=user_data['telegram_id'],
                        text=f"üéâ <b>–í–∞–º –≤—ã–¥–∞–Ω —Å–µ—Ä–≤–µ—Ä!</b>\n\n"
                             f"Server ID: {server_id}\n"
                             f"Username: {credentials['username']}\n"
                             f"Password: {credentials['password']}\n"
                             f"Email: {credentials['email']}\n\n"
                             f"–î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.",
                        parse_mode='HTML'
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")
                
                await update.message.reply_text(
                    f"‚úÖ <b>–°–µ—Ä–≤–µ—Ä –≤—ã–¥–∞–Ω!</b>\n\n"
                    f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_data['first_name']} (@{user_data['username']})\n"
                    f"Server ID: {server_id}\n"
                    f"Username: {credentials['username']}\n"
                    f"Email: {credentials['email']}\n\n"
                    f"–î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.",
                    parse_mode='HTML'
                )
            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞ –≤ Pterodactyl")
    
    async def handle_delete_server(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–£–¥–∞–ª–∏—Ç—å —Å–µ—Ä–≤–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if not update or not update.effective_user or not update.message:
            return
            
        if not self.is_admin(update.effective_user.id):
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", parse_mode='HTML')
            return
        
        if not context.args or len(context.args) < 1:
            await update.message.reply_text(
                "‚ùå <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b> /deleteserver &lt;user_id –∏–ª–∏ username&gt;\n\n"
                "–ü—Ä–∏–º–µ—Ä—ã:\n"
                "/deleteserver 123456789\n"
                "/deleteserver @username",
                parse_mode='HTML'
            )
            return
        
        target = context.args[0]
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data = None
        if target.startswith('@'):
            username = target[1:]
            user_data = self.db.get_user_by_username(username)
        else:
            try:
                user_id = int(target)
                user_data = self.db.get_user(user_id)
            except ValueError:
                await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                return
        
        if not user_data:
            await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–≤–µ—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_servers = self.db.get_user_servers(user_data['telegram_id'])
        if not user_servers:
            await update.message.reply_text(
                f"‚ùå <b>–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç —Å–µ—Ä–≤–µ—Ä–æ–≤!</b>\n\n"
                f"ID: {user_data['telegram_id']}\n"
                f"Username: @{user_data['username']}",
                parse_mode='HTML'
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —É–¥–∞–ª—è–µ–º –∫–∞–∂–¥—ã–π —Å–µ—Ä–≤–µ—Ä
        status_message = await update.message.reply_text(
            "‚è≥ <b>–£–¥–∞–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–æ–≤...</b>",
            parse_mode='HTML'
        )
        
        deleted_count = 0
        failed_servers = []
        
        for server in user_servers:
            server_id = server['pterodactyl_id']
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞ –≤ Pterodactyl
            server_info = await self.pterodactyl_api.get_server_info(server_id)
            if not server_info:
                logger.warning(f"–°–µ—Ä–≤–µ—Ä {server_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Pterodactyl, —É–¥–∞–ª—è–µ–º –∏–∑ –±–∞–∑—ã")
                if self.db.delete_server(server_id):
                    deleted_count += 1
                continue
            
            # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —Å–µ—Ä–≤–µ—Ä
            if await self.pterodactyl_api.delete_server(server_id):
                if self.db.delete_server(server_id):
                    deleted_count += 1
            else:
                failed_servers.append(server_id)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        report = f"‚úÖ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç —É–¥–∞–ª–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–æ–≤</b>\n\n"
        report += f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_data['first_name']} (@{user_data['username']})\n"
        report += f"–£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ: {deleted_count}\n"
        
        if failed_servers:
            report += f"\n‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å:</b>\n"
            for server_id in failed_servers:
                report += f"‚Ä¢ {server_id}\n"
        
        if deleted_count > 0:
            self.db.log_admin_action(
                update.effective_user.id,
                "delete_server",
                user_data['telegram_id'],
                f"–£–¥–∞–ª–µ–Ω–æ —Å–µ—Ä–≤–µ—Ä–æ–≤: {deleted_count}, –û—à–∏–±–æ–∫: {len(failed_servers)}"
            )
        
        await status_message.edit_text(report, parse_mode='HTML')
    
    async def handle_admin_panel(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        if not update or not update.effective_user or not update.message:
            return
            
        if not self.is_admin(update.effective_user.id):
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", parse_mode='HTML')
            return
        
        keyboard = [
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
            [InlineKeyboardButton("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", callback_data="admin_users")],
            [InlineKeyboardButton("üñ•Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞–º–∏", callback_data="admin_servers")],
            [InlineKeyboardButton("üìù –õ–æ–≥–∏ –¥–µ–π—Å—Ç–≤–∏–π", callback_data="admin_logs")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "üîß <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup,
            parse_mode='HTML'
        )

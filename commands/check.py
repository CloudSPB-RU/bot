import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from db.database import Database
from subscription_checker import SubscriptionChecker

logger = logging.getLogger(__name__)

class CheckCommand:
    def __init__(self, db: Database, subscription_checker: SubscriptionChecker):
        self.db = db
        self.subscription_checker = subscription_checker
    
    async def handle(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /check"""
        user = update.effective_user
        
        if not user:
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        user_data = self.db.get_user(user.id)
        if user_data and user_data.get('is_banned'):
            ban_reason = user_data.get('ban_reason', '–ü—Ä–∏—á–∏–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞')
            if update.message:
                await update.message.reply_text(
                    f"üö´ <b>–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã!</b>\n\n"
                    f"–ü—Ä–∏—á–∏–Ω–∞: {ban_reason}\n\n"
                    "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.",
                    parse_mode='HTML'
                )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        subscription_info = await self.subscription_checker.check_subscription(user.id)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
        self.db.update_subscription_check(user.id)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = []
        
        if subscription_info['is_subscribed'] and subscription_info['meets_time_requirement']:
            keyboard.append([InlineKeyboardButton("üñ•Ô∏è –ü–æ–ª—É—á–∏—Ç—å —Å–µ—Ä–≤–µ—Ä", callback_data="get_server")])
        else:
            keyboard.append([InlineKeyboardButton("üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", 
                                               url=f"https://t.me/{self.subscription_checker.channel_username}")])
        
        keyboard.extend([
            [InlineKeyboardButton("üìß –£–∫–∞–∑–∞—Ç—å email", callback_data="set_email")],
            [InlineKeyboardButton("üìä –ú–æ–π —Å–µ—Ä–≤–µ—Ä", callback_data="my_servers")],
            [InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞", callback_data="check_subscription")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")]
        ])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ
        if subscription_info['is_subscribed']:
            if subscription_info['meets_time_requirement']:
                status_text = (
                    "‚úÖ <b>–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞!</b>\n\n"
                    f"–°—Ç–∞—Ç—É—Å: {subscription_info['status']}\n"
                )
                if subscription_info['subscription_duration']:
                    status_text += f"–í—Ä–µ–º—è –ø–æ–¥–ø–∏—Å–∫–∏: {subscription_info['subscription_duration']}\n"
                status_text += "\n–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Å–µ—Ä–≤–µ—Ä!"
            else:
                duration = subscription_info['subscription_duration']
                if duration:
                    remaining = self.subscription_checker.min_subscription_time - duration
                    status_text = (
                        "‚è≥ <b>–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞, –Ω–æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏!</b>\n\n"
                        f"–í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞: {duration}\n"
                        f"–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –º–∏–Ω–∏–º—É–º –Ω–∞: {self.subscription_checker.min_subscription_time}\n"
                        f"–û—Å—Ç–∞–ª–æ—Å—å –∂–¥–∞—Ç—å: {remaining}"
                    )
                else:
                    status_text = (
                        "‚è≥ <b>–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞, –Ω–æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏!</b>\n\n"
                        f"–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –º–∏–Ω–∏–º—É–º –Ω–∞: {self.subscription_checker.min_subscription_time}\n"
                        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                    )
        else:
            status_text = (
                "‚ùå <b>–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª!</b>\n\n"
                "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª:\n"
                f"<a href='https://t.me/{self.subscription_checker.channel_username}'>@{self.subscription_checker.channel_username}</a>"
            )
        
        if update.message:
            await update.message.reply_text(
                status_text,
                reply_markup=reply_markup,
                parse_mode='HTML'
            )
